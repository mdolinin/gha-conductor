/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * moduleName must be unique across the whole mono repo
 */
export type TheModuleNameSchema = string;
/**
 * teamNamespace must be unique across the whole mono repo
 */
export type TheTeamNamespaceSchema = string;
/**
 * Root directory of the namespace.
 */
export type TheROOT_DIRSchema = string;
export type PropertiesDefaultFileChangeTriggerItems = TheFirstAnyOfSchema;
/**
 * List of files that are tracked under defaultFileChangeTrigger variable to trigger pipeline based on the event.
 */
export type TheFirstAnyOfSchema = string;
/**
 * List of files that are tracked under defaultFileChangeTrigger variable to trigger pipeline based on the event.
 */
export type TheDefaultFileChangeTriggerSchema = PropertiesDefaultFileChangeTriggerItems[];
export type PropertiesOnPullRequestItems = TheFirstAnyOfSchema1;
/**
 * Build and test task.
 */
export type TheBuildAndTestSchema = string;
/**
 * helm name for pipeline for executing gradle task
 */
export type TheNameSchema = string;
/**
 * branch name for pipeline for executing task
 */
export type TheRefSchema = string;
/**
 * check and jacocoTestCoverageVerification gradle tasks to run.
 */
export type TheCOMMANDSchema = string;
export type PropertiesOnPullRequestItemsAnyOf0PropertiesTriggerConditionsPropertiesFileChangesMatchAnyItems =
  TheFirstAnyOfSchema2;
/**
 * Condition for trigger for file changes.
 */
export type TheFirstAnyOfSchema2 = string;
/**
 * Condition for trigger for file changes.
 */
export type TheFileChangesMatchAnySchema =
  PropertiesOnPullRequestItemsAnyOf0PropertiesTriggerConditionsPropertiesFileChangesMatchAnyItems[];
/**
 * Gradle tasks to run on Github pull request
 */
export type TheOnPullRequestSchema = PropertiesOnPullRequestItems[];
export type PropertiesOnBranchMergeItems = TheFirstAnyOfSchema3;
/**
 * run sonarqube scanner to detect bugs, vulnerabilities, and code smells in your code.
 */
export type TheNameSchema1 = string;
/**
 * Generic pipeline name to run gradle tasks.
 */
export type TheNameSchema2 = string;
/**
 * branch name for pipeline for executing task
 */
export type TheRefSchema1 = string;
/**
 * run sonarqube scanner to detect bugs, vulnerabilities, and code smells in your code.
 */
export type TheCOMMANDSchema1 = string;
export type PropertiesOnBranchMergeItemsAnyOf0PropertiesTriggerConditionsPropertiesDestinationBranchMatchesAnyItems =
  TheFirstAnyOfSchema4;
/**
 * Branch name for which changes happened.
 */
export type TheFirstAnyOfSchema4 = string;
/**
 * Branch name for which changes happened.
 */
export type TheDestinationBranchMatchesAnySchema =
  PropertiesOnBranchMergeItemsAnyOf0PropertiesTriggerConditionsPropertiesDestinationBranchMatchesAnyItems[];
export type PropertiesOnBranchMergeItemsAnyOf0PropertiesTriggerConditionsPropertiesFileChangesMatchAnyItems =
  TheFirstAnyOfSchema5;
/**
 * list of files that has updates.
 */
export type TheFirstAnyOfSchema5 = string;
/**
 * list of files that has updates.
 */
export type TheFileChangesMatchAnySchema1 =
  PropertiesOnBranchMergeItemsAnyOf0PropertiesTriggerConditionsPropertiesFileChangesMatchAnyItems[];
/**
 * on branch merge github event, triggers gradle taks to publish image to artifactory
 */
export type TheOnBranchMergeSchema = PropertiesOnBranchMergeItems[];
export type PropertiesOnPullRequestCloseItems = TheFirstAnyOfSchema6;
/**
 * run clean up task.
 */
export type TheNameSchema3 = string;
/**
 * Generic pipeline name to run gradle tasks.
 */
export type TheNameSchema4 = string;
/**
 * branch name for pipeline for executing task
 */
export type TheRefSchema2 = string;
/**
 * run clean up task.
 */
export type TheCOMMANDSchema2 = string;
export type PropertiesOnPullRequestCloseItemsAnyOf0PropertiesTriggerConditionsPropertiesFileChangesMatchAnyItems =
  TheFirstAnyOfSchema7;
/**
 * list of files that has updates.
 */
export type TheFirstAnyOfSchema7 = string;
/**
 * list of files that has updates.
 */
export type TheFileChangesMatchAnySchema2 =
  PropertiesOnPullRequestCloseItemsAnyOf0PropertiesTriggerConditionsPropertiesFileChangesMatchAnyItems[];
/**
 * on branch merge github event, triggers tasks to clean up resources
 */
export type TheOnPullRequestCloseSchema = PropertiesOnPullRequestCloseItems[];

/**
 * The root schema comprises the entire JSON document.
 */
export interface TheRootSchema {
  moduleName: TheModuleNameSchema;
  teamNamespace: TheTeamNamespaceSchema;
  sharedParams: TheSharedParamsSchema;
  defaultFileChangeTrigger: TheDefaultFileChangeTriggerSchema;
  onPullRequest: TheOnPullRequestSchema;
  onBranchMerge: TheOnBranchMergeSchema;
  onPullRequestClose?: TheOnPullRequestCloseSchema;
  [k: string]: unknown;
}
/**
 * Params shared across all the projects with in the namespace
 */
export interface TheSharedParamsSchema {
  ROOT_DIR: TheROOT_DIRSchema;
  [k: string]: unknown;
}
/**
 * Gradle tasks to run on Github pull request
 */
export interface TheFirstAnyOfSchema1 {
  name: TheBuildAndTestSchema;
  pipelineRef: ThePipelineRefSchema;
  pipelineRunValues: ThePipelineRunValuesSchema;
  triggerConditions: TheTriggerConditionsSchema;
  [k: string]: unknown;
}
/**
 * pipeline for executing gradle task.
 */
export interface ThePipelineRefSchema {
  name: TheNameSchema;
  ref?: TheRefSchema;
  [k: string]: unknown;
}
/**
 * Gradle tasks to run for build and test
 */
export interface ThePipelineRunValuesSchema {
  params: TheParamsSchema;
  [k: string]: unknown;
}
/**
 * check and jacocoTestCoverageVerification gradle tasks to run.
 */
export interface TheParamsSchema {
  COMMAND: TheCOMMANDSchema;
  [k: string]: unknown;
}
/**
 * Condition for trigger for file changes.
 */
export interface TheTriggerConditionsSchema {
  fileChangesMatchAny: TheFileChangesMatchAnySchema;
  [k: string]: unknown;
}
/**
 * Runs jacocoTestReport task and sonarqube task for the project “examples:example-a“ via  pipeline-gradle-task pipeline developed for executing a generic gradle task when ever there is a change in the files that are tracked under defaultFileChangeTrigger variable..
 */
export interface TheFirstAnyOfSchema3 {
  name: TheNameSchema1;
  pipelineRef: ThePipelineRefSchema1;
  pipelineRunValues: ThePipelineRunValuesSchema1;
  triggerConditions: TheTriggerConditionsSchema1;
  [k: string]: unknown;
}
/**
 * Generic pipeline name to run gradle tasks.
 */
export interface ThePipelineRefSchema1 {
  name: TheNameSchema2;
  ref?: TheRefSchema1;
  [k: string]: unknown;
}
/**
 * run sonarqube scanner to detect bugs, vulnerabilities, and code smells in your code.
 */
export interface ThePipelineRunValuesSchema1 {
  params: TheParamsSchema1;
  [k: string]: unknown;
}
/**
 * run sonarqube scanner to detect bugs, vulnerabilities, and code smells in your code.
 */
export interface TheParamsSchema1 {
  COMMAND: TheCOMMANDSchema1;
  [k: string]: unknown;
}
/**
 * Trigger condition on file changes.
 */
export interface TheTriggerConditionsSchema1 {
  destinationBranchMatchesAny: TheDestinationBranchMatchesAnySchema;
  fileChangesMatchAny: TheFileChangesMatchAnySchema1;
  [k: string]: unknown;
}
/**
 * Runs task for the project “examples:example-a“ via  pipeline-gradle-task pipeline developed for executing a generic gradle task when ever there is a change in the files that are tracked under defaultFileChangeTrigger variable..
 */
export interface TheFirstAnyOfSchema6 {
  name: TheNameSchema3;
  pipelineRef: ThePipelineRefSchema2;
  pipelineRunValues: ThePipelineRunValuesSchema2;
  triggerConditions: TheTriggerConditionsSchema2;
  [k: string]: unknown;
}
/**
 * Generic pipeline name to run gradle tasks.
 */
export interface ThePipelineRefSchema2 {
  name: TheNameSchema4;
  ref?: TheRefSchema2;
  [k: string]: unknown;
}
/**
 * run clean up task.
 */
export interface ThePipelineRunValuesSchema2 {
  params: TheParamsSchema2;
  [k: string]: unknown;
}
/**
 * run clean up task.
 */
export interface TheParamsSchema2 {
  COMMAND: TheCOMMANDSchema2;
  [k: string]: unknown;
}
/**
 * Trigger condition on file changes.
 */
export interface TheTriggerConditionsSchema2 {
  fileChangesMatchAny: TheFileChangesMatchAnySchema2;
  [k: string]: unknown;
}
